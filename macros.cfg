[gcode_macro PRINT_START]
gcode:
  # This part fetches data from your slicer. Such as bed temp, extruder temp, chamber temp and size of your printer.
  {% set target_bed = params.BED|int %}
  {% set target_extruder = params.EXTRUDER|int %}
  {% set target_chamber = params.CHAMBER|default(0)|int %}
  {% set filament_type =  params.MATERIAL_TYPE|string %}
  {% set bed_type = params.BED_TYPE|string %}
  {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
  {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}

  # ~~ Let there be light ~~
  SET_PIN PIN=caselight VALUE=.1
    
  # Turn off all fans
  SET_FAN_SPEED FAN=nevermore_mini SPEED=0
  SET_FAN_SPEED FAN=cabinet_fan SPEED=0
  M106 S0
  
  BED_MESH_CLEAR
  SET_GCODE_OFFSET Z=0

  status_homing
  proximity_home
  
  G90

  status_heating
  M104 S150
  
  # Test Message Logs
  DISPLAYTEXT TEXT="~~ Print Parameters ~~"
  DISPLAYTEXT TEXT="target_chamber: {target_chamber}c"
  DISPLAYTEXT TEXT="target_bed: {target_bed}c"
  DISPLAYTEXT TEXT="bed_type: {bed_type}"
  DISPLAYTEXT TEXT="filament_type: {filament_type}"
  
  # Chamber Heating Conditions
  {% if target_chamber != 0 %}
    status_heating
    DISPLAYTEXT TEXT="Heatsoak to {target_chamber}c"
    
    SET_PIN PIN=caselight VALUE=1
    
    G1 X{x_wait} Y{y_wait} Z2 F18000

    {% if printer['heater_generic bed_fans'].temperature < target_chamber %}
      M190 S120 # Set to highest bed temp NOTE: THERMAL FUSE IS 125C.
    {% endif %}

    # Turn on fans and wait for chamber temp to reach target
    DISPLAYTEXT TEXT="Set Chamber Temp: {target_chamber}"
    SET_HEATER_TEMPERATURE HEATER=bed_fans TARGET={target_chamber}
    SET_FAN_SPEED FAN=nevermore_mini SPEED=1
    M106 S255
    TEMPERATURE_WAIT SENSOR="heater_generic bed_fans" MINIMUM={target_chamber}
    
    M190 S{target_bed} # Set to printing bed temp
    G4 P60000 # Stablize bed final temp before beacon contact
  {% elif bed_type != "Cool Plate" and target_chamber == 0 %}
    status_heating
    DISPLAYTEXT TEXT="No Chamber heating"
    
    SET_PIN PIN=caselight VALUE=0.2
    
    G1 X{x_wait} Y{y_wait} Z2 F18000
    M190 S{target_bed}
    
    DISPLAYTEXT TEXT="Bed Soak (5 Min)"
    G4 P300000
  {% elif bed_type == "Cool Plate" and target_chamber == 0 %}
    DISPLAYTEXT TEXT="No Bedheating"
    SET_PIN PIN=caselight VALUE=0.33
  {% endif %}
  
  # Clean nozzle before z-tilt and bed mesh
  NOZZLE_WIPE
  NOZZLE_CLEAN

  status_homing
  G28 Z METHOD=CONTACT CALIBRATE=1 ; calibrate z offset and beacon model hot
  
  # Z-Tilt
  status_calibrating_z
  DISPLAYTEXT TEXT="Z-Tilt Adjust"
  FAST_Z_TILT

  status_homing
  G28 Z
  
  # Bed Mesh
  status_meshing
  DISPLAYTEXT TEXT="Bed Mesh"
  BED_MESH_CALIBRATE RUNS=2 ADAPTIVE=1 ; bed mesh in scan mode #ADAPTIVE=1

  status_homing
  G28 Z METHOD=CONTACT CALIBRATE=0 ; calibrate z offset with hot nozzle
  
  M107 # Turn off Part Fan
  
  # Heat Nozzle to printing temp.
  status_heating
  DISPLAYTEXT TEXT="Hotend: {target_extruder}c"
  
  Smart_Park
  
  M109 S{target_extruder}

  status_printing
  LINE_PURGE

  {% if bed_type == "Textured PEI Plate" %}
    SET_GCODE_OFFSET Z=-0.005
  {% elif  bed_type == "High Temp Plate" %}
    SET_GCODE_OFFSET Z=0.04
  {% endif %}

  {% if filament_type == "ASA" %}
    SKEW_PROFILE LOAD=CaliFlower_ASA
  {% endif %}

  DISPLAYTEXT TEXT="Printing. . ."

[gcode_macro PRINT_END]
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-2.0 F3600                 ; retract filament
    
    TURN_OFF_HEATERS
    
    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600  ; park nozzle at rear
    M107                                     ; turn off fan
    
    TIMELAPSE_TAKE_FRAME
    TIMELAPSE_RENDER

    SET_SKEW CLEAR=1
    
    SET_DISPLAY_TEXT MSG="~ DING FRIES ARE DONE ~"
    SET_PIN PIN=caselight VALUE=0.01
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END
  
# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10
[gcode_macro TEST_SPEED]
gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    
    # Large pattern
    # Max positions, inset by BOUND
    {% set x_min = printer.toolhead.axis_minimum.x + bound %}
    {% set x_max = printer.toolhead.axis_maximum.x - bound %}
    {% set y_min = printer.toolhead.axis_minimum.y + bound %}
    {% set y_max = printer.toolhead.axis_maximum.y - bound %}
    
    # Small pattern at center
    # Find X/Y center point
    {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
    {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
    
    # Set small pattern box around center point
    {% set x_center_min = x_center - (smallpatternsize/2) %}
    {% set x_center_max = x_center + (smallpatternsize/2) %}
    {% set y_center_min = y_center - (smallpatternsize/2) %}
    {% set y_center_max = y_center + (smallpatternsize/2) %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED
    
    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
    
    # Home and get position for comparison later:
    M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
    G28
    # QGL if not already QGLd (only if QGL section exists in config)
    {% if printer.configfile.settings.quad_gantry_level %}
        {% if printer.quad_gantry_level.applied == False %}
            QUAD_GANTRY_LEVEL
            G28 Z
        {% endif %}
    {% endif %} 
    # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
    G90
    G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
    M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
    G28 X Y
    G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
    G4 P1000 
    GET_POSITION

    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

    # Set new limits
    SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} MINIMUM_CRUISE_RATIO={printer.toolhead.minimum_cruise_ratio}

    {% for i in range(iterations) %}
      # Large pattern diagonals
      G0 X{x_min} Y{y_min} F{speed*60}
      G0 X{x_max} Y{y_max} F{speed*60}
      G0 X{x_min} Y{y_min} F{speed*60}
      G0 X{x_max} Y{y_min} F{speed*60}
      G0 X{x_min} Y{y_max} F{speed*60}
      G0 X{x_max} Y{y_min} F{speed*60}
      
      # Large pattern box
      G0 X{x_min} Y{y_min} F{speed*60}
      G0 X{x_min} Y{y_max} F{speed*60}
      G0 X{x_max} Y{y_max} F{speed*60}
      G0 X{x_max} Y{y_min} F{speed*60}
  
      # Small pattern diagonals
      G0 X{x_center_min} Y{y_center_min} F{speed*60}
      G0 X{x_center_max} Y{y_center_max} F{speed*60}
      G0 X{x_center_min} Y{y_center_min} F{speed*60}
      G0 X{x_center_max} Y{y_center_min} F{speed*60}
      G0 X{x_center_min} Y{y_center_max} F{speed*60}
      G0 X{x_center_max} Y{y_center_min} F{speed*60}
      
      # Small patternbox
      G0 X{x_center_min} Y{y_center_min} F{speed*60}
      G0 X{x_center_min} Y{y_center_max} F{speed*60}
      G0 X{x_center_max} Y{y_center_max} F{speed*60}
      G0 X{x_center_max} Y{y_center_min} F{speed*60}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} MINIMUM_CRUISE_RATIO={printer.toolhead.minimum_cruise_ratio}

    # Re-home and get position again for comparison:
    M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
    G28 # This is a full G28 to fix an issue with CoreXZ - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/12
    # Go to XY home positions (in case your homing override leaves it elsewhere)
    G90
    G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
    G4 P1000 
    GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED
	
[gcode_macro NOZZLE_WIPE]
variable_start_x: 220
variable_start_y: 300
variable_start_z: 0.25

variable_wipe_dist: 50
variable_wipe_qty: 10
variable_wipe_spd: 18000
variable_raise_distance: 10

gcode:
 SAVE_GCODE_STATE NAME=nozzle_wipe

 {% if "xyz" not in printer.toolhead.homed_axes %}
   G28
 {% endif %}

 STATUS_CLEANING

 G90 ; absolute positioning
 
 ## Move nozzle to start position
 G1 X{start_x} Y{start_y} F6000
 G1 Z{start_z} F600
 
 {% set ns = namespace(y_iterations_step=0.2, y_location = start_y) %}
 
 {% for wipes in range(0, wipe_qty) %}
   
   G1 X{start_x + wipe_dist} F{wipe_spd}
   G1 Y{ns.y_location} F{wipe_spd}
   
   {% set ns.y_iterations_step = ns.y_iterations_step + 0.025 %}
   {% set ns.y_location = ns.y_location - ns.y_iterations_step%}
   
   G1 X{start_x} F{wipe_spd}
 {% endfor %}

 G1 Z{raise_distance}
 
 STATUS_READY
 RESTORE_GCODE_STATE NAME=nozzle_wipe

[gcode_macro NOZZLE_CLEAN]
variable_start_x: 164
variable_start_y: 300
variable_start_z: 0.5
variable_raise_distance: 10

gcode:
 SAVE_GCODE_STATE NAME=nozzle_clean

 {% if "xyz" not in printer.toolhead.homed_axes %}
   G28
 {% endif %}

 STATUS_CLEANING

 G90 ; absolute positioning

 ## Move nozzle to start position
 G1 X{start_x} Y{start_y} F6000
 G1 Z{start_z} F600
 
 G91
 
 M106 S255
 
 G1 X13 F500
 G1 Y-0.1 F500
 G1 X-13 F500
 G1 Y-0.2 F500

 G1 X13 F500
 G1 Y-0.3 F500
 G1 X-13 F500
 G1 Y-0.4 F500

 G1 X13 F500
 G1 Y-0.5 F500
 G1 X-13 F500
 G1 Y-0.6 F500

 G1 X13 F500
 G1 Y+0.1 F500
 G1 X-13 F500
 G1 Y+0.2 F500

 G1 X13 F500
 G1 Y+0.3 F500
 G1 X-13 F500
 G1 Y+0.4 F500

 G1 X13 F500
 G1 Y+0.5 F500
 G1 X-13 F500
 G1 Y+0.6 F500

 M400
 
 M106 S0
 
 G1 Z{raise_distance}
 
 STATUS_READY
 RESTORE_GCODE_STATE NAME=nozzle_clean

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                   ; z hop amount

    {% if printer['pause_resume'].is_paused|int == 0 %}
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro

        SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0                                  ; disable filament sensor
        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume
        BASE_PAUSE                                                                           ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
            G91                                                                              ; relative positioning
            G1 Z{z} F900                                                                     ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                  ; absolute positioning
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000   ; park toolhead at front center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)
        M104 S0                                                                              ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
    {% endif %}

## ! Warning !
## This resume macro will move directly back to its previous position.
## If using “complete individual objects” or “one at a time” in your slicer, 
## ensure that the objects are printed from back to front on the build plate to avoid collisions on the return.
[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}                                          ; hotend prime amount (in mm)

    {% if printer['pause_resume'].is_paused|int == 1 %}
        SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1                          ; enable filament sensor
        #INITIAL_RGB                                                                    ; reset LCD color
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                        ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)
        G91                                                                          ; relative positioning
        M83                                                                          ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
            G1 Z{zhop * -1} E{e} F900                                                ; prime nozzle by E, lower Z back down
        {% else %}
            G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          ; restore position
        BASE_RESUME                                                                  ; resume print
    {% endif %}

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout} ; set timeout back to configured value
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    PRINT_END
    BASE_CANCEL_PRINT


[gcode_macro DISPLAYTEXT]
gcode:
    {% set TEXT = params.TEXT|default("")|string %} 
    RESPOND MSG="{TEXT}"
    SET_DISPLAY_TEXT MSG="{TEXT}"

[gcode_macro PARK_AT_PRINT_END]
gcode:
    {% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
    {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
    {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}
    {% set print_max_z = params.PRINT_MAX_Z|int %}
    {% set max_print_height_safe = 300 %}
    
    #   Check end position to determine safe direction to move
    {% if printer.toolhead.position.x < (max_x - 20) %}
        {% set x_safe = 20.0 %}
    {% else %}
        {% set x_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.y < (max_y - 20) %}
        {% set y_safe = 20.0 %}
    {% else %}
        {% set y_safe = -20.0 %}
    {% endif %}

    ; We need to account for our z offset in our max_z
    {% set max_z_adjusted = max_z - printer.gcode_move.homing_origin.z %}
    
    ; Check if we can slightly move print away from print.
    {% if print_max_z < max_z %}
      {% set z_safe = [print_max_z + 2, max_z_adjusted] | min %}
    {% endif %}

    G0 Z{z_safe} F3600             ; Move bed from print
    G91                            ; relative positioning
    G0 X{x_safe} Y{y_safe} F20000  ; move nozzle to remove stringing

    ; Once toolhead has moved, move bed down to final position if needed
    {% if print_max_z < max_z %}
      {% set z_safe = [print_max_z + 20, max_z_adjusted] | min %}
    {% endif %}
    G90                            ; absolute positioning
    G0 Z{z_safe} F3600             ; Final bed move
    G0 X60 Y{max_y-10} F3600       ; park nozzle at rear

[gcode_macro FAST_Z_TILT]
gcode:
    M117 Z_TILT
    {% if printer.configfile.settings.z_tilt %}
        {% if printer.z_tilt.applied == False %}
            Z_TILT_ADJUST RETRY_TOLERANCE=1
        {% endif %}
        Z_TILT_ADJUST horizontal_move_z=2
    {% endif %} 


###########################################################################
# Helper macro that will walk the user through a cold-pull
#
# Assumes the bowden tube is removed from the toolhead and the extruder
# is loaded with about 300mm of filament. The use must have access to the
# filament to firmly pull when asked
#
# Params:
#  MATERIAL=nylon|pla|abs|petg	Starting temp defaults
#  HOT_TEMP			Initial high temp
#  COLD_TEMP			Temp to cool too to help release filament
#  MIN_EXTRUDE_TEMP		Temp to which the extruder will keep nozzle pressurized
#  PULL_TEMP			Temp to perform the cold pull
#  PULL_SPEED			Speed in mm/s of extruder movement to help manual pull
#  CLEAN_LENGTH			Amount of filament to extrude to prime extruder/nozzle
#  EXTRUDE_SPEED		Speed in mm/s to perform extrude operations
#
# _CLIENT_EXTRUDE length={clean_length} speed={extrude_speed}

[gcode_macro COLD_PULL]
description: Guide you through the process of cleaning your extruder with a cold pull
gcode:
  {% set material = params.MATERIAL|default("pla")|string|upper %}
  {% set materials = {
      'NYLON': {'hot_temp': 260, 'cold_temp': 50, 'pull_temp': 120, 'min_extrude_temp': 190},
      'PLA':   {'hot_temp': 250, 'cold_temp': 45, 'pull_temp': 100, 'min_extrude_temp': 160},
      'ABS':   {'hot_temp': 255, 'cold_temp': 50, 'pull_temp': 120, 'min_extrude_temp': 190},
      'PETG':  {'hot_temp': 250, 'cold_temp': 45, 'pull_temp': 100, 'min_extrude_temp': 180}
  } %}
  {% if material not in materials %}
      {action_raise_error("Unknown material. Valid types are: Nylon, ABS, PLA, PETG")}
  {% endif %}

  # Allow individual temperature overrides. Coded like this so Mainsail can parse options
  {% set hot_temp = params.HOT_TEMP|default('')|int %}
  {% set cold_temp = params.COLD_TEMP|default('')|int %}
  {% set pull_temp = params.PULL_TEMP|default('')|int %}
  {% set min_extrude_temp = params.MIN_EXTRUDE_TEMP|default('')|int %}
  {% set hot_temp = (hot_temp if hot_temp > 0 else materials.get(material).hot_temp)|int %}
  {% set cold_temp = (cold_temp if cold_temp > 0 else materials.get(material).cold_temp)|int %}
  {% set pull_temp = (pull_temp if pull_temp > 0 else materials.get(material).pull_temp)|int %}
  {% set min_extrude_temp = (min_extrude_temp if min_extrude_temp > 0 else materials.get(material).min_extrude_temp)|int %}

  {% set pull_speed = params.PULL_SPEED|default(10)|int %}
  {% set clean_length = params.CLEAN_LENGTH|default(25)|int %}
  {% set extrude_speed = params.EXTRUDE_SPEED|default(1.5)|float %}

  {% set ns = namespace(stuff_points=[], cool_points=[]) %}

  {% for temp in range(hot_temp + 1, cold_temp - 1, -1) %}
      {% if temp % 10 == 0 %}
          {% if temp > min_extrude_temp %}
              {% set ns.stuff_points = ns.stuff_points + [temp] %}
          {% elif temp < min_extrude_temp %}
              {% set ns.cool_points = ns.cool_points + [temp] %}
          {% endif %}
      {% endif %}
  {% endfor %}

  DISPLAYTEXT TEXT='{"Cold Pull with pull_temp=%d\u00B0C, hot_temp=%d\u00B0C, min_extrude_temp=%d\u00B0C, cold_temp=%d\u00B0C" % (pull_temp, hot_temp, min_extrude_temp, cold_temp)}'

  DISPLAYTEXT TEXT='{"Heating extruder to %d\u00B0C" % hot_temp}'
  SET_HEATER_TEMPERATURE HEATER="extruder" TARGET={hot_temp}
  TEMPERATURE_WAIT SENSOR="extruder" MINIMUM={hot_temp - 2} MAXIMUM={hot_temp + 2}

  # Ensure the nozzle id completely full
  DISPLAYTEXT TEXT="Cleaning nozzle tip with {clean_length}mm of filament"
  _CLIENT_EXTRUDE length={clean_length} speed={extrude_speed}

  # Begin the cooling ramp
  DISPLAYTEXT TEXT="Allowing extruder to cool..."
  SET_HEATER_TEMPERATURE HEATER="extruder" TARGET={cold_temp}
  M106 S255			# 100% part fan to cool faster

  # While filament can still extrude keep the nozzle completely full
  {% for temp in ns.stuff_points %}
      TEMPERATURE_WAIT SENSOR="extruder" MAXIMUM={temp}
      DISPLAYTEXT TEXT='{"Stuffing nozzle at %d\u00B0C" % temp}'
      _CLIENT_EXTRUDE length=1 speed={extrude_speed}
  {% endfor %}

  # Give some feedback on cooling process
  DISPLAYTEXT TEXT='{"Waiting for extruder to completely cool to %d\u00B0C..." % cold_temp}'
  {% for temp in ns.cool_points %}
      TEMPERATURE_WAIT SENSOR="extruder" MAXIMUM={temp}
      DISPLAYTEXT TEXT='{"Nozzle at %d\u00B0C" % temp}'
  {% endfor %}
  TEMPERATURE_WAIT SENSOR="extruder" MAXIMUM={cold_temp}

  # Re-warm
  M107			# Part fan off
  DISPLAYTEXT TEXT='{"Re-warming extruder to %d\u00B0C" % pull_temp}'
  SET_HEATER_TEMPERATURE HEATER="extruder" TARGET={pull_temp}

  # The manual cold-pull
  TEMPERATURE_WAIT SENSOR="extruder" MINIMUM={pull_temp - 10}
  M300 P500
  DISPLAYTEXT TEXT="Get ready to pull..."
  TEMPERATURE_WAIT SENSOR="extruder" MINIMUM={pull_temp}
  M300 P100
  DISPLAYTEXT TEXT=">>>>> PULL NOW <<<<<"

  # Retract 150 mm at moderate speed (user should pull too)
  _CLIENT_EXTRUDE length=-150 speed={pull_speed}
  DISPLAYTEXT TEXT="Cold pull is successful if you can see the shape of the nozzle at the filament end"

  # Heater completely off
  SET_HEATER_TEMPERATURE HEATER="extruder"

[gcode_macro SET_TEMP]
gcode:
    {% set HEATER = params.HEATER|default("")|string %}
    {% set TEMP = params.TEMP|default(0)|int %}
    {% set WAIT = params.WAIT|default(0)|int %}

    {% if HEATER == "extruder" %}
      {% if WAIT == 1 %}
        M109 S{TEMP}
      {% else %}
        M104 S{TEMP}
      {% endif %}
    {% else %}
     {% if WAIT == 1 %}
        M190 S{TEMP}
      {% else %}
        M140 S{TEMP}
      {% endif %}
    {% endif %}

[gcode_macro M109]
rename_existing: M99109
gcode:
    {% set s = params.S|float %}
    
    M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}
    {% endif %}

[gcode_macro proximity_home]
gcode:
  G28 METHOD=PROXIMITY

[gcode_macro SEARCH_VARS]
gcode:
    {% set search = params.S|lower %}
    {% set ns = namespace() %}
    {% for item in printer  %}
        {% if ' ' in item %}
            {% set ns.path = ['printer', "['%s']" % (item), ''] %}
        {% else %}
            {% set ns.path = ['printer.', item, ''] %}   
        {% endif %} 

        {% if search in ns.path|lower %}
            { action_respond_info(ns.path|join) }
        {% endif %} 

        {% if printer[item].items() %}
            {% for childkey, child in printer[item].items() recursive %}
                {% set ns.path = ns.path[:loop.depth|int + 1] %}

                {% if ' ' in childkey %}
                    {% set null = ns.path.append("['%s']" % (childkey)) %}
                {% else %}
                    {% set null = ns.path.append(".%s" % (childkey)) %}
                {% endif %} 

                {% if child is mapping  %}
                    { loop(child.items()) }
                {% else %}
                    {% if search in ns.path|lower %}
                        { action_respond_info("%s : %s" % (ns.path|join, child)) }   
                    {% endif %} 
                {% endif %} 
                
            {% endfor %}
        {% endif %} 
    {% endfor %}    